# -*- coding: utf-8 -*-
"""python_practice_loops.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ONJcEGIASJ4-HGGdeT1M5s6wBE3Ot2Ny

# I. range.

1. (4 бали) Створіть обʼєкт типу range, який буде містити послідовність цілих чисел від 0 до 9 включно. Виведіть його довжину (кількість значень).
"""

# Створюємо об'єкт типу range
my_range = range(10)

# Виводимо довжину об'єкта
print("Довжина об'єкта range:", len(my_range))

"""2. (5 балів) Створіть обʼєкт типу range, який буде містити послідовність цілих чисел (16, 13, 10, 7, 4, 1, -2, -5)"""

# Створюємо об'єкт типу range з вказаною послідовністю чисел
my_range = range(16, -6, -3)

# Виводимо послідовність чисел
print(list(my_range))

"""3. (4 бали) Створіть змінну зі значенням цілого типу. Перевірте, чи вона належить проміжку від 49 до 100 включно. Як ви гадаєте, для чого використовуються range?"""

# Створюємо змінну зі значенням цілого типу
my_variable = 75

# Перевіряємо, чи змінна належить проміжку від 49 до 100 включно
if my_variable in range(49, 101):
    print("Змінна належить проміжку від 49 до 100 включно.")
else:
    print("Змінна не належить проміжку від 49 до 100 включно.")

"""Функція range(49, 101) використовується для створення проміжку чисел від 49 до 100 (включно). Умова if my_variable in range(49, 101): перевіряє, чи значення змінної знаходиться в цьому проміжку.

# II. Comprehensions.

4. (6 балів) Створіть множину (set), використовуючи range та set comprehension.
"""

# Приклад set comprehension з використанням range
my_set = {x for x in range(1, 10)}

# Виведення результату
print(my_set)

"""5. (8 балів) Створіть словник, використовуючи dict comprehension, що містить if else. Коли слід використовувати comprehensions, а коли їх слід уникати?"""

# Приклад dict comprehension з умовою if-else
my_dict = {x: "even" if x % 2 == 0 else "odd" for x in range(1, 10)}

# Виведення результату
print(my_dict)

"""Comprehensions дозволяють коротше та більш зрозуміло виражати створення списків, множин, словників тощо. Однак, якщо структура даних стає занадто складною або включає багато умов, comprehensions можуть стати менш читабельними, і в таких випадках може бути краще використовувати стандартний цикл та умови if-else.

6. (7 балів) Створіть список з рядками та запишіть його у змінну. Створіть ще один список на основі попереднього, де кожен рядок буде містити тільки три перших заглавних символи. Наприклад: ['hello', 'i', 'dont', 'care'] -> ['HEL', 'I', 'DON', 'CAR']
"""

# Список з рядками
original_list = ['hello', 'i', 'dont', 'care']

# Створення нового списку з три перших заголовних символів кожного рядка
modified_list = [s[:3].upper() for s in original_list]

# Виведення результату
print(modified_list)

"""# III. Цикли.

7. (6 балів) Продемонструйте роботу циклу while. Чи можна використовувати в умові циклу булеві значення? Чому?
"""

# Ініціалізація змінної
counter = 0

# Цикл while з умовою перевірки, чи змінна менша за 5
while counter < 5:
    print(f"Counter: {counter}")
    counter += 1  # Збільшення значення змінної

# Виведення повідомлення після завершення циклу
print("Цикл завершено")
#Цей код виведе значення змінної counter від 0 до 4 і виведе "Цикл завершено" після того, як умова циклу не буде виконуватися (коли counter стане більше або дорівнює 5).

# Цикл while з булевою умовою
is_condition_true = True

while is_condition_true:
    print("Цей рядок виведеться, бо умова True.")
    is_condition_true = False  # Зміна значення, щоб умова стала False і цикл завершився

print("Цикл завершено")
#Важливо слідкувати за тим, щоб уникати безкінечних циклів, де умова завершення ніколи не стає False.

"""8. (8 балів) Напишіть програму, яка виведе на екран непарні числа в діапазоні від 0 до 20 включно."""

# Проходження по діапазону від 0 до 20
for number in range(21):
    # Перевірка, чи число є непарним
    if number % 2 != 0:
        # Виведення непарних чисел
        print(number)

"""9. (7 балів) Створіть список з елементами булевого типу або None. Використовуючи цикли, отримайте в результаті список з кортежами, де перший елемент кортежу - індекс(ціле число), а другий елемент - відповідне значення з першого списку.

Наприклад, [True, True, None, False] -> [(0, True), (1, True), (2, None), (3, False)]
"""

# Початковий список з елементами булевого типу або None
original_list = [True, True, None, False]

# Створення порожнього списку для зберігання кортежів
result_list = []

# Проходження по елементах початкового списку з використанням enumerate
for index, value in enumerate(original_list):
    # Додавання кортежу до результативного списку
    result_list.append((index, value))

# Виведення результативного списку
print(result_list)

"""10. (10 балів) Створіть словник, де ключі - назви книжок, а значення - їхня кількість у наявності в Вашій міні-бібліотеці. Бібліотека має містити щонайменше 6 книжок (6 пар значень у словнику) і щонайбільше 10 (пар значень). Використовуючи цикли, оновіть словник (не створюйте новий) так, щоби кількість книг у наявності збільшилося на 5 кожної книги. Наприклад,
{'It': 3, 'Fault stars': 10, 'Bible': 17, 'Psychological romance': 4, 'Harry Potter': 13} -> {'It': 8, 'Fault stars': 15, 'Bible': 22, 'Psychological romance': 9, 'Harry Potter': 18}
"""

# Початковий словник з кількістю книг у наявності
library = {
    'It': 3,
    'Fault stars': 10,
    'Bible': 17,
    'Psychological romance': 4,
    'Harry Potter': 13,
    'Python Basics': 5,  # Приклад додаткової книги
}

# Оновлення кількості книг у наявності за допомогою циклу
for book in library:
    library[book] += 5

# Виведення оновленого словника
print(library)

"""11. (15 балів) Визначте цілочислену змінну n, що належить проміжку від 4 до 10 включно. Використовуючи цикли, виведіть в консоль наступний патерн.

#
##
###
####

... #*n

"""

# Визначення цілочисельної змінної n
n = 6

# Виведення патерну
for i in range(1, n + 1):
    print('#' * (2 * i - 1))

"""12. (20 балів) Гра "Нумо вгадай".
Розробіть просту гру, де користувач має вгадати випадкове число від 1 до 100. Для генерації випадкового числа використовуйте функцію random.randint(a, b) (тут a та b включно). Для отримання числа з консолі використовуйте функцію input(), результат якої обовʼязково явно приведіть до типу int.

Підказка: використовуйте цикл while та умови if-else, щоб повідомити користувачу піказки (напр. "Більше", "Менше") поки користувач не вгадає. По завершенню виведіть кількість спроб, які знадобилися для вгадування.

"""

import random

def guess_the_number():
    # Генеруємо випадкове число від 1 до 100
    secret_number = random.randint(1, 100)

    # Ініціалізуємо змінну для збереження кількості спроб
    attempts = 0

    print("Вгадайте число від 1 до 100.")

    while True:
        # Збільшуємо кількість спроб
        attempts += 1

        # Користувач вводить свій варіант
        guess = int(input("Ваш варіант: "))

        # Перевіряємо, чи вірно вгадано
        if guess == secret_number:
            print(f"Вітаємо! Ви вгадали число {secret_number} за {attempts} спроб.")
            break
        elif guess < secret_number:
            print("Більше.")
        else:
            print("Менше.")

# Запускаємо гру
guess_the_number()

"""# Вітаю! Ви велика(ий) молодець, що впоралась(вся). Похваліть себе та побалуйте чимось приємним. Я Вами пишаюся.""